import asyncio
from os import environ

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from Data import SearchTemplates, BlackList, VisitsList
import parsing

# –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è. API —Ç–æ–∫–µ–Ω –∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
telegram_key = environ.get('API_TELEGRAM_KEY')
user_id = environ.get('USER_ID')
# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–æ—Ç—É
bot = Bot(token=telegram_key)

# global st, bl, vl, telegram_key, user_id, bot, storage, dp
st = SearchTemplates()
bl = BlackList()
vl = VisitsList()

# MemoryStorage. –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏. –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
class CS(StatesGroup):
	AVAILABLE = State()
	ADD_T1 = State()
	ADD_T2 = State()
	ADD_B1 = State()
	ADD_B2 = State()
	DEL_T = State()
	DEL_B = State()
	STATE_T1 = State()
	STATE_T2 = State()
	STATE_B1 = State()
	STATE_B2 = State()
	REQUEST_DELAY = State()


min_delay = 0
max_delay = 180
current_delay = 1


async def is_user_ID(message):
	return message.from_user.id == int(user_id)

# TODO –£–¥–∞–ª–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∫–æ–¥. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message, state: FSMContext):
	await asyncio.sleep(0.5)
	# –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º ID —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
	if await is_user_ID(message):
		await bot.send_message(message.chat.id, "üñê Hola! \n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º")
		await state.set_state(CS.AVAILABLE)
	else:
		await bot.send_message(message.chat.id, "‚ùå  Please leave this chat. You're an unregistered user\n–ü—Ä–æ—à—É –ø–æ–∫–∏–Ω—É—Ç—å —ç—Ç–æ—Ç —á–∞—Ç. –í—ã –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")


@dp.message_handler(commands=['help'], state=CS.AVAILABLE)
async def command_help(message: types.Message):
	await bot.send_message(message.chat.id, """
	–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	/update_time - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π (–≤ –º–∏–Ω—É—Ç–∞—Ö)

	–®–∞–±–ª–æ–Ω—ã –ø–æ–∏—Å–∫–∞
	/add_t –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ–∏—Å–∫–∞
	/del_t –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ–∏—Å–∫–∞
	/state_t –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
	/print_t –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –ø–æ–∏—Å–∫–∞

	–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
	/add_b –î–æ–±–∞–≤–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
	/del_b –£–¥–∞–ª–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
	/state_b –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
	/print_b –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
	""")


@dp.message_handler(commands=['add_t'], state=CS.AVAILABLE)
async def add_t(message: types.Message, state: FSMContext):
	await bot.send_message(message.chat.id, "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∫–ª—é—á —à–∞–±–ª–æ–Ω–∞")
	await state.set_state(CS.ADD_T1)


@dp.message_handler(state=CS.ADD_T1)
async def add_t_key(message: types.Message, state: FSMContext):
	wordkey = message.text
	# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–µ —Å–ª–æ–≤–æ –∫–ª—é—á –≤ –±–∞–∑–µ —à–∞–±–ª–æ–Ω–æ–≤
	if wordkey in st.get_col_by_name("key"):
		await bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–µ —Å–ª–æ–≤–æ –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∫–ª—é—á")
	else:
		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		await state.update_data(WORDKEY=wordkey)
		await state.set_state(CS.ADD_T2)
		await bot.send_message(message.chat.id, "‚úÖ –°–ª–æ–≤–æ –∫–ª—é—á - —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
		await bot.send_message(message.chat.id, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É")


@dp.message_handler(state=CS.ADD_T2)
async def add_t_url(message: types.Message, state: FSMContext):
	# –ò–∑–≤–ª–µ–∫–∞–µ–º wordkey
	data = await state.get_data()
	wordkey = data.get("WORDKEY")
	# –ü–æ–ª—É—á–∞–µ–º URL
	url = message.text
	st.create_new_row(wordkey, url)
	await bot.send_message(message.chat.id, "‚úÖ –ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!")
	await state.set_state(CS.AVAILABLE)


@dp.message_handler(commands=['del_t'], state=CS.AVAILABLE)
async def del_t_msg(message: types.Message, state: FSMContext):
	await bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –≤–≤–µ–¥–∏—Ç–µ /print_t")
	await state.set_state(CS.DEL_T)


@dp.message_handler(state=CS.DEL_T)
async def del_t_input(message: types.Message, state: FSMContext):
	""" """
	msg = message.text

	try:
		number_template = int(msg)
	except ValueError as err:
		# –ï—Å–ª–∏ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /print_t, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é print_t, –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
		if msg == "/print_t":
			await print_t(message)
		else:
			# –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
			print(err)
			await bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞")
	else:
		# –ï—Å–ª–∏ try –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è else (–∫–æ–¥ –Ω–∏–∂–µ)
		if st.get_num_all_rows() >= number_template > 0:
			key_template = st.get_key_by_number(number_template)
			# –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π –ø–æ –∫–ª—é—á—É —à–∞–±–ª–æ–Ω–∞
			vl.delete_rows_by_key(key_template)
			# –£–¥–∞–ª—è–µ–º —Å–∞–º —à–∞–±–ª–æ–Ω –ø–æ–∏—Å–∫–∞. –£–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –Ω–æ–º–µ—Ä
			# –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –≤ –±–æ—Ç–µ —É–¥–æ–±–Ω–µ–µ –ø–∏—Å–∞—Ç—å —á–∏—Å–ª–æ, –∞ –Ω–µ —Ü–µ–ª—ã–π –∫–ª—é—á
			st.delete_row_by_number(number_template)
			await bot.send_message(message.chat.id, "‚úÖ –ù–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
			await state.set_state(CS.AVAILABLE)
		else:
			await bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–π –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!")


@dp.message_handler(commands=['state_t'], state=CS.AVAILABLE)
async def state_t(message: types.Message, state: FSMContext):
	await bot.send_message(message.chat.id, "1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –≤–≤–µ–¥–∏—Ç–µ /print_t")
	await state.set_state(CS.STATE_T1)


@dp.message_handler(state=CS.STATE_T1)
async def state_t_number(message: types.Message, state: FSMContext):
	msg = message.text

	try:
		number_template = int(msg)
	except ValueError as err:
		# –ï—Å–ª–∏ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /print_t, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é print_t, –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
		if msg == "/print_t":
			await print_t(message)
		else:
			# –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
			print(err)
			await bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞")
	else:
		# –ï—Å–ª–∏ try –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è else (–∫–æ–¥ –Ω–∏–∂–µ)
		# –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
		if st.get_num_all_rows() >= number_template > 0:
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
			await state.update_data(NUMBER=number_template)
			await bot.send_message(message.chat.id, "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞\n–ï—Å–ª–∏ –≤–∫–ª—é—á–∏—Ç—å, —Ç–æ 1(–æ–¥–∏–Ω). –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å, —Ç–æ 0(–Ω–æ–ª—å)")
			await state.set_state(CS.STATE_T2)
		else:
			await bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–π –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!")


@dp.message_handler(state=CS.STATE_T2)
async def state_t_state(message: types.Message, state: FSMContext):
	"""–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
	msg = message.text
	try:
		input_state = int(msg)
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –ø—Ä–∏ –≤–≤–æ–¥–µ –±—ã–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ 0(–Ω–æ–ª—å) –∏–ª–∏ 1(–æ–¥–∏–Ω)
		if input_state not in {0, 1}:
			await bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ 1 –∏–ª–∏ 0")
	except ValueError as err:
		# –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		print(err)
		await bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ 1 –∏–ª–∏ 0")
	else:
		# –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞
		data = await state.get_data()
		number_template = data.get("NUMBER")

		new_state = True if input_state == 1 else (False if input_state == 0 else None)
		st.set_states_template(number_template, new_state)
		await bot.send_message(message.chat.id, "‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
		await state.set_state(CS.AVAILABLE)


@dp.message_handler(commands=['print_t'], state=[
	CS.AVAILABLE, CS.ADD_T1, CS.ADD_T2,
	CS.ADD_B1, CS.ADD_B2, CS.DEL_T, CS.DEL_B])
async def print_t(message: types.Message):
	final_msg = "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤\nüü¢ - —à–∞–±–ª–æ–Ω –≤–∫–ª—é—á–µ–Ω\nüî¥ - —à–∞–±–ª–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω\n\n"
	for line in st.get_all_from_table():
		# –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –≤–∫–ª—é—á–µ–Ω(True), —Ç–æ –≤—ã–≤–æ–¥–∏–º –∑–µ–ª—ë–Ω—ã–π –∫—Ä—É–∂–æ–∫. –ê –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω(False) —Ç–æ –≤—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–Ω—ã–π –∫—Ä—É–∂–æ–∫
		included = str(line[3])
		circle = "üü¢" if included == "True" else ("üî¥" if included == "False" else None)
		final_msg += f"{line[0]}. {circle} {line[1]} - {line[2]}\n"

	await bot.send_message(message.chat.id, final_msg)


@dp.message_handler(commands=['add_b'], state=CS.AVAILABLE)
async def add_b(message: types.Message, state: FSMContext):
	await bot.send_message(message.chat.id, "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∫–ª—é—á –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
	await state.set_state(CS.ADD_B1)


@dp.message_handler(state=CS.ADD_B1)
async def add_b_key(message: types.Message, state: FSMContext):
	wordkey = message.text
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	await state.update_data(WORDKEY=wordkey)
	await state.set_state(CS.ADD_B2)
	await bot.send_message(message.chat.id, "‚úÖ –°–ª–æ–≤–æ –∫–ª—é—á - —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
	await bot.send_message(message.chat.id, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")


@dp.message_handler(state=CS.ADD_B2)
async def add_b_url(message: types.Message, state: FSMContext):
	# –ò–∑–≤–ª–µ–∫–∞–µ–º wordkey
	data = await state.get_data()
	wordkey = data.get("WORDKEY")
	# –ü–æ–ª—É—á–∞–µ–º url
	url = message.text
	bl.create_new_row(wordkey, url)
	await bot.send_message(message.chat.id, "‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!")
	await state.set_state(CS.AVAILABLE)


@dp.message_handler(commands=['del_b'], state=CS.AVAILABLE)
async def del_b_msg(message: types.Message, state: FSMContext):
	await bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –≤–≤–µ–¥–∏—Ç–µ /print_b")
	await state.set_state(CS.DEL_B)


@dp.message_handler(state=CS.DEL_B)
async def del_b_input(message: types.Message, state: FSMContext):
	""" """
	msg = message.text

	try:
		number_exception = int(msg)
	except ValueError as err:
		# –ï—Å–ª–∏ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /print_b, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é print_b, –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
		if msg == "/print_b":
			await print_b(message)
		else:
			# –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
			print(err)
			await bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
	else:
		# –ï—Å–ª–∏ try –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è else (–∫–æ–¥ –Ω–∏–∂–µ)
		if bl.get_num_all_rows() >= number_exception > 0:
			bl.delete_row_by_number(number_exception)
			await bot.send_message(message.chat.id, "‚úÖ –ù–æ–º–µ—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
			await state.set_state(CS.AVAILABLE)
		else:
			await bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–π –Ω–æ–º–µ—Ä –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!")


@dp.message_handler(commands=['state_b'], state=CS.AVAILABLE)
async def state_b(message: types.Message, state: FSMContext):
	await bot.send_message(message.chat.id, "1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏—è.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –≤–≤–µ–¥–∏—Ç–µ /print_b")
	await state.set_state(CS.STATE_B1)


@dp.message_handler(state=CS.STATE_B1)
async def state_b_number(message: types.Message, state: FSMContext):
	msg = message.text

	try:
		number_exception = int(msg)
	except ValueError as err:
		# –ï—Å–ª–∏ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /print_b, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é /print_b, –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
		if msg == "/print_b":
			await print_b(message)
		else:
			# –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
			print(err)
			await bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞")
	else:
		# –ï—Å–ª–∏ try –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è else (–∫–æ–¥ –Ω–∏–∂–µ)
		# –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
		if bl.get_num_all_rows() >= number_exception > 0:
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
			await state.update_data(NUMBER=number_exception)
			await bot.send_message(message.chat.id, "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è\n–ï—Å–ª–∏ –≤–∫–ª—é—á–∏—Ç—å, —Ç–æ 1(–æ–¥–∏–Ω). –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å, —Ç–æ 0(–Ω–æ–ª—å)")
			await state.set_state(CS.STATE_B2)
		else:
			await bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–π –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!")


@dp.message_handler(state=CS.STATE_B2)
async def state_b_state(message: types.Message, state: FSMContext):
	"""–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è"""
	msg = message.text
	try:
		input_state = int(msg)
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –ø—Ä–∏ –≤–≤–æ–¥–µ –±—ã–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ 0(–Ω–æ–ª—å) –∏–ª–∏ 1(–æ–¥–∏–Ω)
		if input_state not in {0, 1}:
			await bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ 1 –∏–ª–∏ 0")
	except ValueError as err:
		# –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		print(err)
		await bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ 1 –∏–ª–∏ 0")
	else:
		# –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏—è
		data = await state.get_data()
		number_exception = data.get("NUMBER")

		new_state = True if input_state == 1 else (False if input_state == 0 else None)
		bl.set_states_template(number_exception, new_state)
		await bot.send_message(message.chat.id, "‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
		await state.set_state(CS.AVAILABLE)


@dp.message_handler(commands=['print_b'], state=[
	CS.AVAILABLE, CS.ADD_T1, CS.ADD_T2,
	CS.ADD_B1, CS.ADD_B2, CS.DEL_T, CS.DEL_B])
async def print_b(message: types.Message):
	final_msg = "–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\nüü¢ - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\nüî¥ - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ\n\n"
	for line in bl.get_all_from_table():
		# –ï—Å–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ(True), —Ç–æ –≤—ã–≤–æ–¥–∏–º –∑–µ–ª—ë–Ω—ã–π –∫—Ä—É–∂–æ–∫. –ê –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ(False) —Ç–æ –≤—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–Ω—ã–π –∫—Ä—É–∂–æ–∫
		included = str(line[3])
		circle = "üü¢" if included == "True" else ("üî¥" if included == "False" else None)
		final_msg += f"{line[0]}. {circle} {line[1]} - {line[2]}\n"

	await bot.send_message(message.chat.id, final_msg)

#############################

@dp.message_handler(commands=['update_time'], state=CS.AVAILABLE)
async def msg_request_interval(message: types.Message, state: FSMContext):
	await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π (–≤ –º–∏–Ω—É—Ç–∞—Ö)")
	await state.set_state(CS.REQUEST_DELAY)


@dp.message_handler(state=CS.REQUEST_DELAY)
async def set_request_interval(message: types.Message, state: FSMContext):
	msg = message.text
	try:
		delay = int(msg)
	except ValueError as err:
		print(err)
		await bot.send_message(message.chat.id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {min_delay + 1} –¥–æ {max_delay}")
	else:
		if max_delay > delay > min_delay:
			global current_delay #TODO
			# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. 
			current_delay = delay
			await bot.send_message(message.chat.id, """‚úÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!""")
			await state.set_state(CS.AVAILABLE)
		else:
			await bot.send_message(message.chat.id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {min_delay + 1} –¥–æ {max_delay}")

async def send_to_user(param):
	vacancy_name_emoji = "üé´"
	wage_emoji = "üí∞"
	name_company_emoji = "üè¢"
	metro_emoji = "‚ìÇÔ∏è"
	address_emoji = "üåç"

	# –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	text_message = f"""#{param['key']}
	{vacancy_name_emoji} <a href="{param['url']}">{param['vacancy_name']}</a>
	{wage_emoji} {param['wage']}
	{name_company_emoji} {param['name_company']}
	{metro_emoji} {param['metro']}
	{address_emoji} {param['city']} {param['street']} (<a href="{param['yandex_url']}">YandexMap</a>, <a href="{param['google_url']}">GoogleMap</a>)"""

	# –£–¥–∞–ª—è–µ–º —Ç–∞–±—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –º–µ—à–∞—é—Ç
	text_message = text_message.replace("	", "")
	# –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–±—ã—á–Ω—ã–µ
	text_message = text_message.replace("¬†", " ")

	# –ò—Å–ø–æ–ª—å–∑—É–µ–º parse_mode='HTML', —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ Markdown –Ω—É–∂–Ω–æ –º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å '(' –Ω–∞ '\\('
	# –≠—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∞—Ä—É—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
	await bot.send_message(user_id, text_message, parse_mode='HTML')

async def background_task():
	while True:
		for all_param in parsing.get_param_for_msg():
			await send_to_user(all_param) 
		
		# –¢–∞–∫ –∫–∞–∫ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –º–∏–Ω—É—Ç–∞—Ö, –∞ asyncio.sleep() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –£–º–Ω–æ–∂–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ 60
		await asyncio.sleep(current_delay * 60)

async def on_startup(dp):
	# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
	asyncio.create_task(background_task())

if __name__ == "__main__":
	executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
