import asyncio
from os import environ
# import threading

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from Data import SearchTemplates, BlackList, VisitsList
# import Main

# –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è. API —Ç–æ–∫–µ–Ω –∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
telegram_key = environ.get('API_TELEGRAM_KEY')
user_id = environ.get('USER_ID')
# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–æ—Ç—É
bot = Bot(token=telegram_key)

# global st, bl, vl, telegram_key, user_id, bot, storage, dp
st = SearchTemplates("SearchTemplates.db")
bl = BlackList("BlackList.db")
vl = VisitsList("SearchTemplates.db")

# MemoryStorage. –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–Ω–æ–π –ø–∞–º—è—Ç–∏. –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
class CS(StatesGroup):
	AVAILABLE = State()
	ADD_T1 = State()
	ADD_T2 = State()
	ADD_B1 = State()
	ADD_B2 = State()
	DEL_T = State()
	DEL_B = State()
	SET_TIME = State()

# def run_telegram():
# 	executor.start_polling(dp, skip_updates=True)


async def is_user_ID(message):
	return message.from_user.id == int(user_id)


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message, state: FSMContext):
	await asyncio.sleep(0.5)
	# –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º ID —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
	if await is_user_ID(message):
		await bot.send_message(message.chat.id, "üñê Hola! \n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º")
		await state.set_state(CS.AVAILABLE)
	else:
		await bot.send_message(message.chat.id, "‚ùå  Please leave this chat. You're an unregistered user\n–ü—Ä–æ—à—É –ø–æ–∫–∏–Ω—É—Ç—å —ç—Ç–æ—Ç —á–∞—Ç. –í—ã –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")


@dp.message_handler(commands=['help'], state=CS.AVAILABLE)
async def command_help(message: types.Message):
	await bot.send_message(message.chat.id, """
	–®–∞–±–ª–æ–Ω—ã –ø–æ–∏—Å–∫–∞
	/add_t –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ–∏—Å–∫–∞
	/del_t –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ–∏—Å–∫–∞
	/print_t –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –ø–æ–∏—Å–∫–∞

	–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
	/add_b –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
	/del_b –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
	/print_b –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∞–¥—Ä–µ—Å–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
	""")


@dp.message_handler(commands=['add_t'], state=CS.AVAILABLE)
async def add_t(message: types.Message, state: FSMContext):
	await bot.send_message(message.chat.id, "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∫–ª—é—á —à–∞–±–ª–æ–Ω–∞")
	await state.set_state(CS.ADD_T1)


@dp.message_handler(state=CS.ADD_T1)
async def add_t_key(message: types.Message, state: FSMContext):
	wordkey = message.text
	# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–µ —Å–ª–æ–≤–æ –∫–ª—é—á –≤ –±–∞–∑–µ —à–∞–±–ª–æ–Ω–æ–≤
	if wordkey in st.get_col_by_name("key"):
		await bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–µ —Å–ª–æ–≤–æ –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∫–ª—é—á")
	else:
		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		await state.update_data(WORDKEY=wordkey)
		await state.set_state(CS.ADD_T2)
		await bot.send_message(message.chat.id, "‚úÖ –°–ª–æ–≤–æ –∫–ª—é—á - —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
		await bot.send_message(message.chat.id, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ url –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É")


@dp.message_handler(state=CS.ADD_T2)
async def add_t_url(message: types.Message, state: FSMContext):
	# –ò–∑–≤–ª–µ–∫–∞–µ–º wordkey
	data = await state.get_data()
	wordkey = data.get("WORDKEY")
	# –ü–æ–ª—É—á–∞–µ–º url
	url = message.text
	st.create_new_row(wordkey, url)
	await bot.send_message(message.chat.id, "‚úÖ –ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!")
	await state.set_state(CS.AVAILABLE)


@dp.message_handler(commands=['del_t'], state=CS.AVAILABLE)
async def del_t_msg(message: types.Message, state: FSMContext):
	await bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –≤–≤–µ–¥–∏—Ç–µ /print_t")
	await state.set_state(CS.DEL_T)


@dp.message_handler(state=CS.DEL_T)
async def del_t_input(message: types.Message, state: FSMContext):
	""" """
	msg = message.text

	try:
		number_templace = int(msg)
	except ValueError as e:
		# –ï—Å–ª–∏ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞ –ø—Ä–∏–Ω–∏–º–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /print_t, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é print_t, –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
		if msg == "/print_t":
			await print_t(message, state)
		else:
			# –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
			print(e)
			await bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞")
	else:
		# –ï—Å–ª–∏ try –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è else (–∫–æ–¥ –Ω–∏–∂e)
		if st.get_num_all_rows() >= number_templace > 0:
			st.delete_row_by_number(number_templace)
			await bot.send_message(message.chat.id, "‚úÖ –ù–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
			await state.set_state(CS.AVAILABLE)
		else:
			await bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–π –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!")


@dp.message_handler(commands=['print_t'], state=[
	CS.AVAILABLE, CS.ADD_T1, CS.ADD_T2,
	CS.ADD_B1, CS.ADD_B2, CS.DEL_T, CS.DEL_B])
async def print_t(message: types.Message):
	final_msg = "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤\n\n"
	for line in st.get_all_table():
		final_msg += f"{line[0]}. {line[1]} - {line[2]}\n"

	await bot.send_message(message.chat.id, final_msg)


@dp.message_handler(commands=['add_b'], state=CS.AVAILABLE)
async def add_b(message: types.Message, state: FSMContext):
	await bot.send_message(message.chat.id, "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∫–ª—é—á –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
	await state.set_state(CS.ADD_B1)


@dp.message_handler(state=CS.ADD_B1)
async def add_b_key(message: types.Message, state: FSMContext):
	wordkey = message.text
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	await state.update_data(WORDKEY=wordkey)
	await state.set_state(CS.ADD_B2)
	await bot.send_message(message.chat.id, "‚úÖ –°–ª–æ–≤–æ –∫–ª—é—á - —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
	await bot.send_message(message.chat.id, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ url –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")


@dp.message_handler(state=CS.ADD_B2)
async def add_b_url(message: types.Message, state: FSMContext):
	# –ò–∑–≤–ª–µ–∫–∞–µ–º wordkey
	data = await state.get_data()
	wordkey = data.get("WORDKEY")
	# –ü–æ–ª—É—á–∞–µ–º url
	url = message.text
	bl.create_new_row(wordkey, url)
	await bot.send_message(message.chat.id, "‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!")
	await state.set_state(CS.AVAILABLE)


@dp.message_handler(commands=['del_b'], state=CS.AVAILABLE)
async def del_b_msg(message: types.Message, state: FSMContext):
	await bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –≤–≤–µ–¥–∏—Ç–µ /print_b")
	await state.set_state(CS.DEL_B)


@dp.message_handler(state=CS.DEL_B)
async def del_b_input(message: types.Message, state: FSMContext):
	msg = message.text
	try:
		number_exception = int(msg)
		if bl.get_num_all_rows() >= number_exception > 0:
			bl.delete_row_by_number(number_exception)
			await bot.send_message(message.chat.id, "‚úÖ –ù–æ–º–µ—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
			await state.set_state(CS.AVAILABLE)
		else:
			await bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–π –Ω–æ–º–µ—Ä –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!")
	except:
		if msg == "/print_b":
			await print_b(message, state)
		else:
			await bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")


@dp.message_handler(commands=['print_b'], state=[
	CS.AVAILABLE, CS.ADD_T1, CS.ADD_T2,
	CS.ADD_B1, CS.ADD_B2, CS.DEL_T, CS.DEL_B])
async def print_b(message: types.Message):
	final_msg = "–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n\n"
	for line in bl.get_all_table():
		final_msg += f"{line[0]}. {line[1]} - {line[2]}\n"

	await bot.send_message(message.chat.id, final_msg)


# H–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# @dp.message_handler(commands=['set_time'], state=CS.AVAILABLE)
# async def msg_request_interval(message: types.Message, state: FSMContext):
# 	await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—Ä–æ—Å–æ–≤ ")
# 	await state.set_state(CS.SET_TIME)


# # H–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# @dp.message_handler(state=CS.SET_TIME)
# async def set_request_interval(message: types.Message, state: FSMContext):
# 	delay = int(message.text)
# 	if 60 > delay > 0:
# 		Main.set_time(delay)
# 		await bot.send_message(message.chat.id, """‚úÖ –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω """)
# 		await state.set_state(CS.AVAILABLE)


if __name__ == "__main__":
	executor.start_polling(dp, skip_updates=True)


# start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
# help - –ü–æ–º–æ—â—å
# set_time - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
# add_t - –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ–∏—Å–∫–∞
# del_t - –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ–∏—Å–∫–∞
# print_t - –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –ø–æ–∏—Å–∫–∞
# add_b - –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
# del_b - –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
# print_b - –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∞–¥—Ä–µ—Å–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
