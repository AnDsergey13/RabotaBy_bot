import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from aiogram.dispatcher import FSMContext
# from aiogram.dispatcher.filters.state import StatesGroup, State
# from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –§–∞–π–ª–∏–∫ —Å API —Ç–æ–∫–µ–Ω–æ–º –∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import config
bot = Bot(token=config.API_TOKEN)

# MemoryStorage. –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–Ω–æ–π –ø–∞–º—è—Ç–∏. –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π. –°–æ—Å—Ç–æ—è–Ω–∏—è –Ω—É–∂–Ω—ã –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏, –Ω–µ —Å–º–æ–≥–ª–∏ —Å –¥—Ä—É–≥ –¥—Ä—É–≥–æ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å.
# class ClientState(StatesGroup):
# 	ANONYMOUS = State()

# from FastStorage import FstSrg
# fs = FstSrg()

async def is_user_ID(message):
	return message.from_user.id == config.USER_ID

@dp.message_handler(commands=['start'])  
async def cmd_start(message: types.Message):
	await asyncio.sleep(0.5)
	if await is_user_ID(message):
		await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!")
	else:
		await bot.send_message(message.chat.id, "Please leave this chat. You're an unregistered user\n–ü—Ä–æ—à—É –ø–æ–∫–∏–Ω—É—Ç—å —ç—Ç–æ—Ç —á–∞—Ç. –í—ã –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")


if __name__ == "__main__":
	executor.start_polling(dp, skip_updates=True)



# async def start_keyboard_and_message(message, state):
# 	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
# 	button = types.KeyboardButton("–ù–∞—á–∞—Ç—å ü™ê")
# 	keyboard.add(button)
# 	# reply_markup=keyboard - —ç—Ç–æ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –≠—Ç–æ—Ç —Ç–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–µ–ª—å–∑—è –æ—Ç–¥–µ–ª—å–Ω–æ, –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é, –û—Ç–ø—Ä–∞–≤–∏—Ç—å ü¶ã –≤ —á–∞—Ç. 
# 	await bot.send_message(message.chat.id, "–ü–æ–¥–µ–ª–∏—Å—å —Å –Ω–∞–º–∏ –º–æ–º–µ–Ω—Ç–æ–º –∏–∑ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.", reply_markup=keyboard)

# # –¢–∞–∫ –∫–∞–∫ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ? –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, –≤—ã–Ω–æ—Å–∏–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
# async def publish_anonymously(message, state):
# 	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
# 	button_yes = types.KeyboardButton("‚úÖ –î–∞")
# 	button_no = types.KeyboardButton("‚ùå –ù–µ—Ç")
# 	button_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
# 	# –ö–Ω–æ–ø–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—é—Ç—Å—è —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –≤ –ø–æ—Ä—è–¥–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. 
# 	keyboard.add(button_yes, button_no, button_back)
# 	await message.answer("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ? (—Ç–≤–æ–π –Ω–∏–∫–Ω–µ–π–º, –≤–æ–∑—Ä–∞—Å—Ç –∏ –ø–æ–ª –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Ç–∞–π–Ω–æ–π)", reply_markup=keyboard)
# 	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ ANONYMOUS, —á—Ç–æ–±—ã —Å–ª—É—á–∞–Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∏—Å—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# 	await state.set_state(ClientState.ANONYMOUS)

# @dp.message_handler(text="–ù–∞—á–∞—Ç—å ü™ê")
# async def begin(message: types.Message, state:FSMContext):
# 	await publish_anonymously(message, state)

# # –ï—Å–ª–∏ state=ClientState. —Ä–∞–≤–µ–Ω –¥—Ä—É–≥–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è anonymous_answer_yes, –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
# # –¢–∞–∫ –∂–µ –∏ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
# @dp.message_handler(text=["‚úÖ –î–∞"], state=ClientState.ANONYMOUS)
# async def anonymous_answer_yes(message: types.Message, state:FSMContext):
# 	# –°–æ–∑–¥–∞—ë–º —Å–ø–µ—Ü –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ANON=True –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å #–∞–Ω–æ–Ω–∏–º–Ω–æ –∏–ª–∏ #–ö–∏–±–æ—Ä–≥-–£–±–∏–π—Ü–∞ #–º—É–∂—Å–∫–æ–π #31
# 	await state.update_data(ANON=True)
# 	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ ANONYMOUS_YES, —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥" –º—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–µ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –∞ –∫ –≤–æ–ø—Ä–æ—Å—É "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ?..."
# 	await state.set_state(ClientState.ANONYMOUS_YES)
# 	# –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç—Ç–∞–ø, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é
# 	await recording_history(message, state)

# @dp.message_handler(text="üîô –ù–∞–∑–∞–¥", state=ClientState.ANONYMOUS)
# async def back_to_start(message: types.Message, state:FSMContext):
# 	# –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
# 	await start_keyboard_and_message(message, state)
# 	# –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –¢—É—Ç –Ω–∞–¥–æ —ç—Ç–æ????
# 	await state.finish()

# @dp.message_handler(text=["‚ùå –ù–µ—Ç"], state=ClientState.ANONYMOUS)
# async def anonymous_answer_no(message: types.Message, state:FSMContext):

# 	await state.update_data(ANON=False)

# 	user_id = int(message.from_user.id)
# 	if db.check_user_id(user_id):
# 		# –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ, —Ç–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –ª–∏—à–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –±–∞–∑—É
# 		nickname = db.get_cell(user_id, "nickname")
# 		await state.update_data(NICKNAME=nickname)

# 		gender = db.get_cell(user_id, "gender")
# 		await state.update_data(GENDER=gender)

# 		age = db.get_cell(user_id, "age")
# 		await state.update_data(AGE=age)

# 		await state.set_state(ClientState.USER_FOUND)
# 		await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {nickname}! –î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å.")
# 		# –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç—Ç–∞–ø, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é
# 		await recording_history(message, state)
# 	else:
# 		await registration_keyboard_and_messages(message, state)

# async def registration_keyboard_and_messages(message, state, –∞dditional_text="‚ùóÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"):
# 	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
# 	button = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
# 	keyboard.add(button)
# 	await message.answer(–∞dditional_text)
# 	await message.answer("1Ô∏è‚É£  –¢–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (—Å–æ–∑–¥–∞—ë—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑, –±–æ–ª—å—à–µ 2 –∏ –º–µ–Ω—å—à–µ 16 —Å–∏–º–≤–æ–ª–æ–≤):",  reply_markup=keyboard)
# 	await state.set_state(ClientState.USER_NOT_FOUND)

# @dp.message_handler(text="üîô –ù–∞–∑–∞–¥", state=ClientState.USER_NOT_FOUND)
# async def back_to_publish_anonymously(message: types.Message, state:FSMContext):
# 	await publish_anonymously(message, state)

# async def gender_keyboard_and_messages(message, state):
# 	await state.set_state(ClientState.SET_NICKNAME)
# 	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
# 	button_male = types.KeyboardButton("‚ôÇ –ú—É–∂—Å–∫–æ–π")
# 	button_female = types.KeyboardButton("‚ôÄ –ñ–µ–Ω—Å–∫–∏–π")
# 	# button_another = types.KeyboardButton("‚ö•,‚öß,‚ö¶,NB,‚àÖ –î—Ä—É–≥–æ–π")
# 	button_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
# 	keyboard.add(button_male, button_female, button_back) # —É–±—Ä–∞–ª –∫–Ω–æ–ø–∫—É button_another
# 	await message.answer("2Ô∏è‚É£ –¢–≤–æ–π –ø–æ–ª:",  reply_markup=keyboard)

# @dp.message_handler(state=ClientState.USER_NOT_FOUND)
# async def nickname_processing(message: types.Message, state:FSMContext):
# 	nickname = message.text
# 	# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–∞ –¥–ª–∏–Ω—É
# 	if len(nickname) > 2 and len(nickname) < 16:
# 		# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∏–∫–Ω–µ–π–º
# 		await state.update_data(NICKNAME=nickname)
# 		# parse_mode="HTML" –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
# 		# <i></i> - —ç—Ç–æ –Ω–∞–¥–ø–∏—Å—å –∫—É—Ä—Å–∏–≤–æ–º
# 		# <b></b> - —ç—Ç–æ –∂–∏—Ä–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å
# 		await message.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏–∫–Ω–µ–π–º <i>{nickname}</i>!", parse_mode="HTML")
# 		# –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞(–≥–µ–Ω–¥–µ—Ä–∞)
# 		await gender_keyboard_and_messages(message, state)
# 	else:
# 		# –¢–∞–∫ –∫–∞–∫ –∫–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–µ–Ω, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ. 
# 		# –ù–æ –≤–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", –≤—Å—Ç–∞–≤–ª—è–µ–º "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º!"
# 		await registration_keyboard_and_messages(message, state, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º!")

# @dp.message_handler(text="üîô –ù–∞–∑–∞–¥", state=ClientState.SET_NICKNAME)
# async def back_to_registration(message: types.Message, state:FSMContext):
# 	await registration_keyboard_and_messages(message, state)

# # –û–±—ä–µ–¥–µ–Ω—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö (–≥–µ–Ω–¥–µ—Ä)–∫–Ω–æ–ø–æ–∫
# @dp.message_handler(text=["‚ôÇ –ú—É–∂—Å–∫–æ–π", "‚ôÄ –ñ–µ–Ω—Å–∫–∏–π"], state=ClientState.SET_NICKNAME)
# async def change_gender(message: types.Message, state: FSMContext):
# 	gender_text = message.text

# 	# –ß—Ç–æ–±—ã –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –æ–±—Ä–µ–∂–µ–º —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
# 	import re
# 	clear_gender_text = re.sub('[^–∞-—è–ê-–Ø\s]', '', gender_text)
# 	# –ê –ø–æ—Å–ª–µ —É–¥–∞–ª–∏–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã(strip) –∏ —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –±—É–∫–≤—ã –º–∞–ª–µ–Ω—å–∫–∏–º–∏(lower)
# 	gender_text = clear_gender_text.strip().lower()

# 	await state.update_data(GENDER=message.text[2])
# 	await message.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω <i>{gender_text}</i> –ø–æ–ª!", parse_mode="HTML")

# 	await age_keyboard_and_message(message, state)

# async def age_keyboard_and_message(message, state):
# 	await state.set_state(ClientState.SET_GENDER)
# 	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
# 	button_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
# 	keyboard.add(button_back)
# 	await message.answer("3Ô∏è‚É£ –¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (2-99):",  reply_markup=keyboard)

# async def get_string_age(age):
# 	# –¢–∞–∫ –∫–∞–∫ –∏–∑-–∑–∞ —á–∏—Å–ª–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
# 	# –ø—Ä–∏–º–µ—Ä1: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–≤–∞–¥—Ü–∞—Ç—å –æ–¥–∏–Ω –≥–æ–¥
# 	# –ø—Ä–∏–º–µ—Ä2: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Ä–æ–∫ —á–µ—Ç—ã—Ä–µ –≥–æ–¥–∞
# 	# –ø—Ä–∏–º–µ—Ä3: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç—Ä–∏–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç—å –ª–µ—Ç
# 	basic_text = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
# 	if age in range(11, 15):
# 		# 11 - 14 –ª–µ—Ç, —ç—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø—Ä–∞–≤–∏–ª, –ø–æ—ç—Ç–æ–º—É –ø–∏—à–µ–º –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
# 		return f"{basic_text}–æ <i>{age}</i> –ª–µ—Ç!"
# 	elif age % 10 == 1:
# 		# –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 10 —Ä–∞–≤–Ω–æ 1
# 		return f"{basic_text} <i>{age}</i> –≥–æ–¥!"
# 	elif age % 10 in range(2, 5):
# 		# –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 10 –æ—Ç 2 –¥–æ 4
# 		return f"{basic_text}–æ <i>{age}</i> –≥–æ–¥–∞!"
# 	else:
# 		return f"{basic_text}–æ <i>{age}</i> –ª–µ—Ç!"

# async def save_user_data(message, state):
# 	user_id = str(message.from_user.id)
# 	first_name = str(message.from_user.first_name)
# 	last_name = str(message.from_user.last_name)
# 	username = str(message.from_user.username)

# 	# –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
# 	data = await state.get_data()
# 	nickname = data.get("NICKNAME")
# 	gender = data.get("GENDER")
# 	age = data.get("AGE")

# 	# –ø—Ä–æ–≤–µ—Ä–∫–∞. –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ. –ï—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à—É—Ç—Å—è
# 	if not db.check_user_id(user_id):
# 		# —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ. –ò –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—É–¥–∞ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
# 		db.create_string(user_id, first_name, last_name, username, nickname, gender, age)
# 	else:
# 		db.set_sell(user_id, "first_name", first_name)
# 		db.set_sell(user_id, "last_name", last_name)
# 		db.set_sell(user_id, "username", username)
# 		db.set_sell(user_id, "nickname", nickname)
# 		db.set_sell(user_id, "gender", gender)
# 		db.set_sell(user_id, "age", age)

# @dp.message_handler(state=ClientState.SET_GENDER)
# async def age_processing(message: types.Message, state:FSMContext):
# 	msg = message.text
# 	if msg != "üîô –ù–∞–∑–∞–¥":
# 		try:
# 			# –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø–∏—Å—å –≤ —á–∏—Å–ª–æ
# 			age = int(msg)
# 			if age > 1 and age < 100:
# 				await state.update_data(AGE=age)

# 				# –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
# 				# –ø—Ä–∏–º–µ—Ä3: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ 35 –ª–µ—Ç
# 				string = await get_string_age(age)
# 				# —Ç–∞–∫ –∫–∞–∫ –≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å <i></i>, –ø–æ—ç—Ç–æ–º—É —É–∫–∞–∑—ã–≤–∞–µ–º parse_mode="HTML"
# 				await message.answer(string, parse_mode="HTML")

# 				# –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
# 				await save_user_data(message, state)

# 				await state.set_state(ClientState.SET_AGE)
# 				# –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç—Ç–∞–ø, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é
# 				await recording_history(message, state)
# 			else:
# 				await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç!")
# 				await age_keyboard_and_message(message, state)
# 		except:
# 			await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç!")
# 			await age_keyboard_and_message(message, state)
# 	else:
# 		await gender_keyboard_and_messages(message, state)

# @dp.message_handler(text="üîô –ù–∞–∑–∞–¥", state=[ClientState.SET_AGE, ClientState.ANONYMOUS_YES, ClientState.USER_FOUND])
# async def back_to_different_directions(message: types.Message, state:FSMContext):
# 	# –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±—ã—Å—Ç—Ä–æ–π –±–∞–∑—ã, –µ—Å–ª–∏ –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è üîô –ù–∞–∑–∞–¥
# 	user_id = str(message.from_user.id)
# 	await fs.del_user(user_id)

# 	# –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞, –∫–Ω–æ–ø–∫–∞ üîô –ù–∞–∑–∞–¥ –≤–µ–¥—ë—Ç ...
# 	current_status = await state.get_state()
# 	if current_status == "ClientState:SET_AGE":
# 		# ... –∏–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å—É –æ –≤–æ–∑—Ä–∞—Å—Ç–µ(—ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏),
# 		await age_keyboard_and_message(message, state)
# 	elif current_status == "ClientState:ANONYMOUS_YES" or current_status == "ClientState:USER_FOUND":
# 		# ... –∏–ª–∏ –∫ –≤–æ–ø—Ä–æ—Å—É "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ?...",
# 		await publish_anonymously(message, state)

# ################################

# async def recording_history(message: types.Message, state:FSMContext):
# 	# —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±—ã—Å—Ç—Ä–æ–π –±–∞–∑–µ
# 	await fs.create_new_user(str(message.from_user.id))
# 	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
# 	send_moderator = types.KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ü¶ã")
# 	button_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
# 	keyboard.add(send_moderator, button_back)
# 	# await message.answer("‚ùóÔ∏è –ü—Ä–æ—Å—å–±–∞. –§–∞–π–ª—ã, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏, –∏ –¥—Ä. –æ—Ç–ø—Ä–∞–≤–ª—è–π –û–¢–î–ï–õ–¨–ù–û –æ—Ç —Ç–µ–∫—Å—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ ‚ùóÔ∏è ")1Ô∏è‚É£
# 	# await message.answer("–£–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤—Å—ë-—Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ")
# 	await message.answer("1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º.\n\n2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å, –ø–æ –∂–µ–ª–∞–Ω–∏—é.\n\n3Ô∏è‚É£ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è' –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.\n\n–ö–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –≤ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –Ω–∞–±–æ—Ä–µ —Ç–µ–∫—Å—Ç–∞.")
# 	# await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é' –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.\n –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –Ω–∞–±–æ—Ä–µ —Ç–µ–∫—Å—Ç–∞.", reply_markup=keyboard)
# 	await message.answer("–¢–≤–æ–π –º–æ–º–µ–Ω—Ç:", reply_markup=keyboard) 

# # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –ø–æ—Ç–æ–º –∏–∑–º–µ–Ω–∏–ª, —Ç–æ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –∑–∞—á–µ–Ω–∏—è –≤ –±—ã—Å—Ç—Ä–æ–π –±–∞–∑–µ 
# @dp.edited_message_handler(content_types=["text", "photo", "document"], state=[ClientState.SET_AGE, ClientState.ANONYMOUS_YES, ClientState.USER_FOUND])
# async def update_text(message: types.Message, state: FSMContext):
# 	user_id = str(message.from_user.id)
# 	msg_id = str(message.message_id)
# 	type_msg = message.content_type
# 	await fs.update_obj_from_id(user_id, type_msg, msg_id, message)

# @dp.message_handler(content_types=["text"], state=[ClientState.SET_AGE, ClientState.ANONYMOUS_YES, ClientState.USER_FOUND])
# async def save_text(message: types.Message, state: FSMContext):
# 	user_id = str(message.from_user.id)
# 	msg_id = str(message.message_id)
# 	type_msg = message.content_type
# 	text = message.text
# 	if text != "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ü¶ã":
# 		await fs.add_obj_to(user_id, type_msg, msg_id, message)
# 	else:
# 		await state.set_state(ClientState.SEND_MODERATOR)
# 		keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
# 		button = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ üèï")
# 		keyboard.add(button)
# 		await message.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—Å—å –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏.",reply_markup=keyboard)
# 		await send_to_moderator(message, state)

# @dp.message_handler(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ üèï", state=ClientState.SEND_MODERATOR)
# async def new_story(message: types.Message, state:FSMContext):
# 	await starting_message(message, state)

# async def get_header_for_msg(message, state):
# 	# –ø–æ–ª—É—á–∞–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ANON, –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç—å
# 	data = await state.get_data()
# 	anon = data.get("ANON")
# 	if anon:
# 		return "#moment\n#–∞–Ω–æ–Ω–∏–º–Ω–æ\n"
# 	else:
# 		user_id = str(message.from_user.id)
# 		# –ø–æ–ª—É—á–∞–µ–º –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# 		nickname = db.get_cell(user_id, "nickname")
# 		gender = db.get_cell(user_id, "gender")
# 		age = db.get_cell(user_id, "age")

# 		# –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
# 		string = f"#moment\n#{nickname} #{gender} #{age}\n"
# 		return string
		
# async def send_to_moderator(message, state):
# 	user_id = str(message.from_user.id)
# 	moderator_id = config.ID_MODERATOR
# 	# —Å–ø–∏—Å–æ–∫ –∏–∑ —Ç–∏–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º
# 	list_types_messages = ["text", "photo", "audio", "voice", "video_note", "document", "location"]
# 	for type_message in list_types_messages:
# 		# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤, –ø–æ id –∏ –ø–æ —Ç–∏–ø—É
# 		# –ï—Å–ª–∏ —Ç–∏–ø —ç—Ç–æ "photo", —Ç–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –±—ã—Å—Ç—Ä–æ–π –±–∞–∑—ã(FastStorage)
# 		list_obj = await fs.get_list_objs(user_id, type_message)

# 		# –ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≤ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ. –ó–Ω–∞—á–∏—Ç –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç—ã, –±—É–¥—É—Ç –ø—É—Å—Ç—ã–µ. –ò —á—Ç–æ–±—ã –ª–∏—à–Ω–∏–π —Ä–∞–∑ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å–æ–∑–¥–∞–Ω–æ —Ç–∞–∫–æ–µ —É—Å–ª–æ–≤–∏–µ
# 		if list_obj != []:
# 			if type_message == "text" and block_text == False:
# 				# –ø–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏ –≤—Å—Ç–∞–≤–ª–µ—è–µ–º –≤ –ø–µ—Ä–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
# 				# –ü—Ä–∏–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ 1: #–∞–Ω–æ–Ω–∏–º–Ω–æ
# 				# –ü—Ä–∏–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ 2: #–¢–æ–Ω–Ω–∏–°—Ç–∞—Ä–∫ #–º—É–∂—Å–∫–æ–π #73
# 				header_msg = await get_header_for_msg(message, state)
# 				# await bot.send_message(chat_id=moderator_id, text=header_msg)

# 				# enumerate - —ç—Ç–æ —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
# 				for num_msg, obj in enumerate(list_obj):
# 					# –¢–∞–∫ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏(–∏–Ω–¥–µ–∫—Å 0), –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
# 					if num_msg == 0:
# 						# –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–Ω—É—Ç—Ä—å –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
# 						obj.text = f"{header_msg}\n{obj.text}"
# 					# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# 					# –ö–æ—Å—Ç—ã–ª—å –∏–∑ try/except(—ç—Ç–æ –Ω–µ —Ç–æ–ª–∫–æ –¥–ª—è "text", –Ω–æ –∏ –¥–∞–ª–µ–µ –ø–æ –∫–æ–¥—É) –Ω—É–∂–µ–Ω –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
# 					# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –≤ –±–æ—Ç–µ –≤—Å—ë—Ä–∞–≤–Ω–æ –æ–Ω–æ –æ—Å—Ç–∞—ë—Ç—Å—è. –ò –±—ã—Å—Ç—Ä–æ–π –±–∞–∑–µ —Ç–æ–∂–µ. –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.
# 					# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# 					try:
# 						# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
# 						await bot.send_message(chat_id=moderator_id, text=obj.text)
# 					except:
# 						# pass —ç—Ç–æ –∫–æ–¥-–∑–∞–≥–ª—É—à–∫–∞. –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç. –ü—Ä–æ—Å—Ç–æ –µ—ë –∏–Ω–æ–≥–¥–∞ —Å—Ç–∞–≤—è—Ç –ø—Ä–∏ –ø—Å–µ–≤–¥–æ–∫–æ–¥–µ
# 						pass

# 			if type_message == "photo" and block_photo == False:
# 				for obj in list_obj:
# 					try:
# 						# —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º —Å–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç 3 —Ç–∏–ø–∞ –∫–∞—á–µ—Å—Ç–≤–∞. 
# 						# –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –ª—É—á—à–∏–π
# 						photo_ = obj.photo[-1]
# 						media = [types.InputMediaPhoto(media=photo_.file_id, caption=obj.caption)]
# 						await bot.send_media_group(chat_id=moderator_id, media=media)
# 					except:
# 						pass

# 			if type_message == "audio" and block_audio == False:
# 				for obj in list_obj:
# 					try:
# 						await bot.send_audio(chat_id=moderator_id, audio=obj.audio.file_id)
# 					except:
# 						pass

# 			if type_message == "voice" and block_voice == False:
# 				for obj in list_obj:
# 					try:
# 						await bot.send_voice(chat_id=moderator_id, voice=obj.voice.file_id)
# 					except:
# 						pass

# 			if type_message == "video_note" and block_video_note == False:
# 				for obj in list_obj:
# 					try:
# 						await bot.send_video_note(chat_id=moderator_id, video_note=obj.video_note.file_id)
# 					except:
# 						pass

# 			if type_message == "document" and block_document == False:
# 				for obj in list_obj:
# 					try:
# 						await bot.send_document(chat_id=moderator_id, document=obj.document.file_id, caption=obj.caption)
# 					except:
# 						pass

# 			if type_message == "location" and block_location == False:
# 				for obj in list_obj:
# 					try:
# 						latitude = obj.location.latitude
# 						longitude = obj.location.longitude
# 						await bot.send_location(chat_id=moderator_id, latitude=latitude, longitude=longitude)
# 					except:
# 						pass

# 	# —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ã—Å—Ç—Ä–æ–π –±–∞–∑—ã
# 	await fs.del_user(user_id)

# ## C–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±—ã—Å—Ç—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
# @dp.message_handler(content_types=["photo", "audio", "voice", "video_note", "document", "location"], state=[ClientState.SET_AGE, ClientState.ANONYMOUS_YES, ClientState.USER_FOUND])
# async def save_all(message: types.Message, state: FSMContext):
# 	user_id = str(message.from_user.id)
# 	msg_id = str(message.message_id)
# 	type_msg = message.content_type
# 	await fs.add_obj_to(user_id, type_msg, msg_id, message)

# if __name__ == "__main__":
# 	# –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
# 	executor.start_polling(dp, skip_updates=True)