[project]
name = "RabotaBy_bot"
version = "0.0.0"
authors = [
  {name = "Anakin"},
]
dependencies = [
    "aiogram",
    "beautifulsoup4",
    "psycopg",
    "requests",
]

# [project.optional-dependencies]
# test = [
#     "pytest",
# ]

[tool.ruff]
# https://docs.astral.sh/ruff/configuration/
# https://docs.astral.sh/ruff/rules/
preview = true
unsafe-fixes = true
select = [
    "ALL"
]
ignore = [
    # Incompatible rules
    # "D203", https://docs.astral.sh/ruff/rules/one-blank-line-before-class/
    # "D211", https://docs.astral.sh/ruff/rules/blank-line-before-class/
    "D203",
    # "D212", https://docs.astral.sh/ruff/rules/multi-line-summary-first-line/
    # "D213", https://docs.astral.sh/ruff/rules/multi-line-summary-second-line/
    "D213",
    # with ruff format
    # "COM812",
    # "ISC001",

    # Don't check at all
    # copyrights; preview
    "CPY001",
    # annotations
    "ANN",
    # print use
    "T201",

    # Indentation contains tabs
    "W191",

    "RUF001",
    "RUF002",
    "RUF003",

    # Fix later

    # Figure out what to do

    # # Line too long [54]
    # "E501",
    # # Found commented-out code [42]
    # "ERA001",
    # # Single quotes found but double quotes preferred [26]
    # "Q000",
    # # Whitespace before ':' [19]
    # "E203",
    # # First line should end with a period [18]
    # "D400",
    # # First line should end with a period, question mark, or exclamation point [18]
    # "D415",
    # # Missing docstring in public function [17]
    # "D103",
    # # Docstring is over-indented [12]
    # "D208",
    # # Possible SQL injection vector through string-based query construction [10]
    # "S608",
    # # Blank line contains whitespace [8]
    # "W293",
    # # Missing docstring in public method [8]
    # "D102",
    # # Docstring is empty [7]
    # "D419",
    # # Trailing comma missing [6]
    # "COM812",
    # # Import block is un-sorted or un-formatted [4]
    # "I001",
    # # Invalid module name [4]
    # "N999",
    # # Too many leading `#` before block comment [4]
    # "E266",
    # # Trailing whitespace [4]
    # "W291",
    # # Missing docstring in public module [4]
    # "D100",
    # # Missing docstring in `__init__` [4]
    # "D107",
    # # Line contains TODO, consider resolving the issue [3]
    # "FIX002",
    # # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...` [3]
    # "TD002",
    # # Missing issue link on the line following this TODO [3]
    # "TD003",
    # # Missing colon in TODO [3]
    # "TD004",
    # # Docstring should be indented with spaces, not tabs [3]
    # "D206",
    # # No whitespaces allowed surrounding docstring text [3]
    # "D210",
    # # Boolean default positional argument in function definition [2]
    # "FBT002",
    # # Mutable class attributes should be annotated with `typing.ClassVar` [2]
    # "RUF012",
    # # Probable use of requests call without timeout [1]
    # "S113",
    # # Do not catch blind exception: `Exception` [1]
    # "BLE001",
    # # Loop control variable `it` not used within loop body [1]
    # "B007",
    # # Unnecessary generator (rewrite as a `list` comprehension) [1]
    # "C400",
    # # Unnecessary `list` call (remove the outer call to `list()`) [1]
    # "C411",
    # # The use of `datetime.datetime.now()` without `tz` argument is not allowed [1]
    # "DTZ005",
    # # Missing explicit `return` at the end of function able to return non-`None` value [1]
    # "RET503",
    # # Unnecessary assignment to `query` before `return` statement [1]
    # "RET504",
    # # Unnecessary `else` after `return` statement [1]
    # "RET505",
    # # Missing issue description after `TODO` [1]
    # "TD005",
    # # Function name `is_user_ID` should be lowercase [1]
    # "N802",
    # # No newline at end of file [1]
    # "W292",
    # # Missing docstring in public class [1]
    # "D101",
    # # Missing docstring in public package [1]
    # "D104",
    # # No blank lines allowed after function docstring (found 1) [1]
    # "D202",
    # # 1 blank line required between summary line and description [1]
    # "D205",
    # # `Data.Base` imported but unused [1]
    # "F401",
    # # Method `get_current_datetime` could be a function, class method, or static method [1]
    # "PLR6301",
    # # Unnecessary parentheses after class definition [1]
    # "UP039",
    # # Use explicit conversion flag [1]
    # "RUF010",
    # # Consider moving this statement to an `else` block [1]
    # "TRY300",
]
line-length = 90

#[tool.ruff.lint]
#unfixable = [
#    "COM812",
#]

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.per-file-ignores]
# For tests: assert use, ends-in-period, unused-variable
"test_*" = ["S101", "D400", "F841"]
"*_test" = ["S101", "D400", "F841"]
"*_test_*" = ["S101", "D400", "F841"]

[tool.ruff.format]
skip-magic-trailing-comma = true
indent-style = "tab"





[tool.pylint.main]
ignore-patterns = [
    "pyproject.toml",
]
# Virtual environment
init-hook = """
try: import pylint_venv
except ImportError: pass
else: pylint_venv.inithook(force_venv_activation=True, quiet=True)
"""
load-plugins = [
    "pylint_per_file_ignores",
]
# extension-pkg-allow-list = [
#     "pygame",
# ]

[tool.pylint.format]
max-line-length = 90
indent-string = "\t"

[tool.pylint."messages control"]
disable = [
    # https://pylint.pycqa.org/en/latest/faq.html#which-messages-should-i-disable-to-avoid-duplicates-if-i-use-other-popular-linters
    # duplicates with flake8:pycodestyle
    # "bad-indentation", is not covered by ruff
    "bare-except",
    "line-too-long",
    "missing-final-newline",
    "multiple-statements",
    "singleton-comparison",
    "trailing-whitespace",
    "unnecessary-semicolon",
    # unnecessary-negation is not covered by flake8
    "unnecessary-negation",
    "wrong-import-position",
    # duplicates with flake8:pyflakes
    "undefined-variable",
    "unused-import",
    "unused-variable",
    # docstrings, duplicates with ruff:D
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "empty-docstring",
]
per-file-ignores = [
    "test_*:unused-variable",
    # Don't work (astroid-error)
    # "*_test:unused-variable",
    # "*_test_*:unused-variable",
]

[tool.pylint.reports]
output-format = "colorized"
score = false





[tool.flake8]
exclude = [".venv/"]
ignore = [
    # closing bracket is missing indentation
    "E133",
    # line break before binary operator
    "W503",

    # duplicates with ruff
    "B007",
    "E203",
    "E266",
    "E501",
    "F401",
    "W191",
    "W291",
    "W292",
    "W293",

    # "E302",
    # "E303",
    # "E123",
]
max-line-length = 90
per-file-ignores = [
    # in tests: Local variable name is assigned to but never used
    "test_*:F841",
    "*_test:F841",
    "*_test_*:F841",
]
